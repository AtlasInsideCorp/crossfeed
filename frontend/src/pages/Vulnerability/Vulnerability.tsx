import {
  Paper,
  makeStyles,
  TextareaAutosize,
  Chip,
  MenuItem,
  Select,
  InputLabel,
  FormControl
} from '@material-ui/core';
import { Check, Flag, ChevronLeft } from '@material-ui/icons';
import { useAuthContext } from 'context';
import { stateMap } from 'pages/Vulnerabilities/Vulnerabilities';
import React, { useCallback, useEffect, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { Link, useParams } from 'react-router-dom';
import { Vulnerability as VulnerabilityType } from 'types';
import vulnClasses from './styles.module.scss';
import { formatDistanceToNow, parseISO, format } from 'date-fns';
import {
  Timeline,
  TimelineItem,
  TimelineSeparator,
  TimelineDot,
  TimelineConnector,
  TimelineContent
} from '@material-ui/lab';
import { Button } from '@trussworks/react-uswds';

export const Vulnerability: React.FC = () => {
  const { vulnerabilityId } = useParams();
  const { apiGet, apiPut } = useAuthContext();
  const [vulnerability, setVulnerability] = useState<VulnerabilityType>();
  const [comment, setComment] = useState<string>('');
  const [showCommentForm, setShowCommentForm] = useState<boolean>(false);
  const classes = useStyles();

  const formatDate = (date: string) => {
    return format(parseISO(date), 'MM-dd-yyyy');
  };

  const fetchVulnerability = useCallback(async () => {
    try {
      const result = await apiGet<VulnerabilityType>(
        `/vulnerabilities/${vulnerabilityId}`
      );
      setVulnerability(result);
    } catch (e) {
      console.error(e);
    }
  }, [vulnerabilityId, apiGet]);

  const updateVulnerability = async (body: { [key: string]: string }) => {
    try {
      if (!vulnerability) return;
      const res = await apiPut<VulnerabilityType>(
        '/vulnerabilities/' + vulnerability.id,
        {
          body: body
        }
      );
      setVulnerability({
        ...vulnerability,
        state: res.state,
        substate: res.substate,
        actions: res.actions
      });
    } catch (e) {
      console.error(e);
    }
  };

  useEffect(() => {
    fetchVulnerability();
  }, [fetchVulnerability]);

  if (!vulnerability) return <></>;
  vulnerability.references = [
    {
      url: 'http://google.com',
      tags: ['Link'],
      name: 'Test',
      source: 'Test'
    }
  ];

  return (
    <div className={vulnClasses.root}>
      <p>
        <Link to="/inventory/vulnerabilities" className={classes.backLink}>
          <ChevronLeft
            style={{
              height: '100%',
              verticalAlign: 'middle',
              marginTop: '-2px'
            }}
          ></ChevronLeft>
          Back to list
        </Link>
      </p>

      <div className={vulnClasses.inner}>
        <Paper classes={{ root: classes.root }} style={{ float: 'left' }}>
          <div className={classes.title}>
            <h4>{vulnerability.title}</h4>

            <Select
              labelId="demo-simple-select-outlined-label"
              id="demo-simple-select-outlined"
              value={0}
              onChange={(e) => {
                updateVulnerability({
                  substate: e.target.value as string
                });
              }}
              label="Age"
              style={{
                border: '0px white none !important'
              }}
              disableUnderline={true}
            >
              <MenuItem value={0}>
                <Flag style={{ fontSize: '14px', color: '#A9AEB1' }}></Flag>{' '}
                Mark Item
              </MenuItem>
              <MenuItem value="unconfirmed">Unconfirmed</MenuItem>
              <MenuItem value="exploitable">Exploitable</MenuItem>
              <MenuItem value="false-positive">False Positive</MenuItem>
              <MenuItem value="accepted-risk">Accepted Risk</MenuItem>
              <MenuItem value="remediated">Remediated</MenuItem>
            </Select>
          </div>
          <Chip
            style={{
              marginLeft: '1.5rem'
            }}
            // icon={<Check></Check>}
            label={`${vulnerability.state[0].toUpperCase()}${vulnerability.state.slice(
              1
            )} (${stateMap[vulnerability.substate]})`}
            color={vulnerability.state === 'open' ? 'secondary' : 'default'}
          />
          <div className={classes.inner}>
            <div className={classes.section}>
              <h4 className={classes.subtitle}>Description</h4>
              {vulnerability.description}
            </div>
            <div className={classes.section}>
              <h4 className={classes.subtitle}>References</h4>
              {vulnerability.references &&
                vulnerability.references.map((ref, index) => (
                  <p key={index}>
                    <a href={ref.url} target="_blank" rel="noopener noreferrer">
                      {ref.url}
                    </a>
                    {ref.tags.length > 0 ? ' - ' + ref.tags.join(',') : ''}
                  </p>
                ))}
            </div>
          </div>
        </Paper>
        <Paper className={`${classes.root} ${classes.cardRight}`}>
          <div className={classes.inner}>
            <div className={classes.section}>
              <h2 className={classes.subtitle}>Team notes</h2>
              <a
                onClick={() => {
                  setShowCommentForm(!showCommentForm);
                }}
                className={classes.linkSmall}
              >
                Add new note
              </a>
            </div>
            {showCommentForm && (
              <>
                <TextareaAutosize
                  style={{ width: 300, padding: 10 }}
                  rowsMin={2}
                  placeholder="Leave a Comment"
                  onChange={(e) => setComment(e.target.value)}
                />
                <br></br>
                <Button
                  type="button"
                  style={{ width: 150 }}
                  outline
                  onClick={() => {
                    updateVulnerability({
                      comment
                    });
                  }}
                >
                  Comment
                </Button>
              </>
            )}
            {vulnerability.actions &&
              vulnerability.actions
                .filter((action) => action.type === 'comment')
                .map((action, index) => (
                  <div className={classes.section} key={index}>
                    <h4
                      className={classes.subtitle}
                      style={{ fontSize: '16px', display: 'inline' }}
                    >
                      {action.userName}
                    </h4>
                    <span style={{ float: 'right', display: 'inline' }}>
                      {formatDistanceToNow(parseISO(action.date))} ago
                    </span>
                    <ReactMarkdown source={action.value} linkTarget="_blank" />
                  </div>
                ))}
          </div>
        </Paper>
        <Paper className={`${classes.root} ${classes.cardRight}`}>
          <div className={classes.inner}>
            <div className={classes.section}>
              <h2 className={classes.subtitle}>Vulnerability History</h2>
            </div>
            <Timeline
              style={{
                position: 'relative',
                width: '100%',
                left: 0
              }}
            >
              {vulnerability.actions &&
                vulnerability.actions
                  .filter(
                    (action) =>
                      action.type === 'state-change' && action.substate
                  )
                  .map((action, index) => (
                    <TimelineItem key={index}>
                      <TimelineSeparator>
                        <TimelineDot />
                        <TimelineConnector />
                      </TimelineSeparator>
                      <TimelineContent>
                        State {action.automatic ? 'automatically ' : ''}changed
                        to {action.state} (
                        {stateMap[action.substate!].toLowerCase()})
                        {action.userName ? ' by ' + action.userName : ''}
                      </TimelineContent>
                    </TimelineItem>
                  ))}

              <TimelineItem>
                <TimelineSeparator>
                  <TimelineDot />
                </TimelineSeparator>
                <TimelineContent>
                  {'Opened on ' + formatDate(vulnerability.createdAt)}
                </TimelineContent>
              </TimelineItem>
            </Timeline>
          </div>
        </Paper>
      </div>
    </div>
  );
};

const useStyles = makeStyles((theme) => ({
  root: {
    border: `1px solid #E5E5E5`,
    marginBottom: '1rem',
    '& *:focus': {
      outline: 'none !important'
    },
    width: '45%',
    display: 'inline-block'
  },
  cardRight: {
    marginLeft: '32px',
    width: '30%'
  },
  title: {
    color: '#3D4551',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '1.5rem 1.5rem',
    fontSize: '2rem',
    textDecoration: 'none',

    '& > h4': {
      wordBreak: 'break-all',
      paddingRight: '2rem',
      margin: '0'
    },

    '& > a, & > h4 a': {
      color: 'white',
      textDecoration: 'none'
    }
  },
  section: {
    marginBottom: '1.5rem'
  },
  subtitle: {
    margin: 0,
    padding: '0 0 0.2rem 0',
    fontSize: '1.2rem',
    fontWeight: 500,
    color: '#3D4551'
  },
  inner: {
    padding: '1.5rem'
  },
  backLink: {
    color: '#A9AEB1',
    textDecoration: 'none',
    fontWeight: 'bold',
    fontSize: '16px',
    marginLeft: '1rem'
  },
  linkSmall: {
    fontSize: '12px',
    color: '#3D4551',
    textDecoration: 'underline',
    cursor: 'pointer'
  }
}));
