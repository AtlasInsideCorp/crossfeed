import {
  Paper,
  Accordion,
  AccordionSummary,
  Typography,
  AccordionDetails,
  makeStyles,
  Button,
  List,
  ListItem,
  ListItemText,
  TextareaAutosize
} from '@material-ui/core';
import { ArrowBackIos, ChevronLeft, ExpandMore } from '@material-ui/icons';
import { DefinitionList } from 'components/DefinitionList';
import { useAuthContext } from 'context';
import { url } from 'inspector';
import { stateMap } from 'pages/Vulnerabilities/Vulnerabilities';
import { domain } from 'process';
import React, { useCallback, useEffect, useState } from 'react';
import { FaExternalLinkAlt } from 'react-icons/fa';
import ReactMarkdown from 'react-markdown';
import { Link, useParams } from 'react-router-dom';
import { Vulnerability as VulnerabilityType } from 'types';
import vulnClasses from './styles.module.scss';
import { differenceInCalendarDays, parseISO, format } from 'date-fns';

export const Vulnerability: React.FC = () => {
  const { vulnerabilityId } = useParams();
  const { apiGet } = useAuthContext();
  const [vulnerability, setVulnerability] = useState<VulnerabilityType>();
  const classes = useStyles();

  const extLink = <FaExternalLinkAlt style={{ width: 12 }}></FaExternalLinkAlt>;
  const comments: { [key: string]: string } = {};

  const formatDate = (date: string) => {
    return format(parseISO(date), 'MM-dd-yyyy');
  };

  const fetchVulnerability = useCallback(async () => {
    try {
      const result = await apiGet<VulnerabilityType>(
        `/vulnerabilities/${vulnerabilityId}`
      );
      setVulnerability(result);
    } catch (e) {
      console.error(e);
    }
  }, [vulnerabilityId, apiGet]);

  useEffect(() => {
    fetchVulnerability();
  }, [fetchVulnerability]);

  if (!vulnerability) return <></>;
  vulnerability.references = [
    {
      url: 'http://google.com',
      tags: ['Link'],
      name: 'Test',
      source: 'Test'
    }
  ];

  return (
    <div className={vulnClasses.root}>
      <p>
        <Link to="/inventory/vulnerabilities" className={classes.backLink}>
          <ChevronLeft
            style={{
              height: '100%',
              verticalAlign: 'middle',
              marginTop: '-2px'
            }}
          ></ChevronLeft>
          Back to list
        </Link>
      </p>
      <div className={vulnClasses.inner}>
        <Paper classes={{ root: classes.root }} style={{ float: 'left' }}>
          <div className={classes.title}>
            <h4>{vulnerability.title}</h4>
          </div>
          <div className={classes.inner}>
            <div className={classes.section}>
              <h4 className={classes.subtitle}>Description</h4>
              {vulnerability.description}
            </div>
            <div className={classes.section}>
              <h4 className={classes.subtitle}>References</h4>
              {vulnerability.references &&
                vulnerability.references.map((ref, index) => (
                  <p key={index}>
                    <a href={ref.url} target="_blank" rel="noopener noreferrer">
                      {ref.url}
                    </a>
                    {ref.tags.length > 0 ? ' - ' + ref.tags.join(',') : ''}
                  </p>
                ))}
            </div>
          </div>
        </Paper>

        <Paper
          classes={{ root: classes.root }}
          style={{
            marginLeft: '32px',
            width: '30%'
          }}
        >
          <div className={classes.inner}>
            <div className={classes.section}>
              <h2 className={classes.subtitle}>Team notes</h2>
              Add a new note
            </div>
            {vulnerability.actions &&
              vulnerability.actions.map((action, index) => {
                let primary: JSX.Element = <></>;
                let secondary: JSX.Element = <></>;
                // if (action.type === 'state-change' && action.substate) {
                //   const val = action.automatic ? (
                //     <>
                //       State automatically changed to{' '}
                //       {stateMap[action.substate].toLowerCase()}
                //     </>
                //   ) : (
                //     <>
                //       State changed to {action.state} (
                //       {stateMap[action.substate].toLowerCase()}) by{' '}
                //       {action.userName}
                //     </>
                //   );
                //   primary = (
                //     <>
                //       {val} on {formatDate(action.date)}
                //     </>
                //   );
                if (action.type === 'comment' && action.value) {
                  secondary = <>{action.userName}</>;
                  return (
                    <div className={classes.section}>
                      <h4 className={classes.subtitle}>{action.userName}</h4>
                      <ReactMarkdown
                        source={action.value}
                        linkTarget="_blank"
                      />
                    </div>
                  );
                }
                return <></>;
              })}
            {/* <ListItem button divider={true} key="initial">
                <ListItemText
                  primary={'Opened on ' + formatDate(vulnerability.createdAt)}
                ></ListItemText>
              </ListItem> */}
            {/* 
            <TextareaAutosize
              style={{ width: 300, padding: 10 }}
              rowsMin={2}
              placeholder="Leave a Comment"
              onChange={(e) => (comments[vulnerability.id] = e.target.value)}
            />
            <br></br> */}
          </div>
        </Paper>
      </div>
    </div>
  );
};

const useStyles = makeStyles((theme) => ({
  root: {
    border: `1px solid #E5E5E5`,
    marginBottom: '1rem',
    '& *:focus': {
      outline: 'none !important'
    },
    width: '45%',
    display: 'inline-block'
  },
  title: {
    color: '#3D4551',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '1.5rem 1.5rem',
    fontSize: '2rem',
    textDecoration: 'none',

    '& > h4': {
      wordBreak: 'break-all',
      paddingRight: '2rem',
      margin: '0'
    },

    '& > a, & > h4 a': {
      color: 'white',
      textDecoration: 'none'
    }
  },
  section: {
    marginBottom: '1.5rem'
  },
  subtitle: {
    margin: 0,
    padding: '0 0 0.2rem 0',
    fontSize: '1.2rem',
    fontWeight: 500,
    color: '#3D4551'
  },
  inner: {
    padding: '1.5rem'
  },
  accordion: {
    color: '#3D4551',
    textAlign: 'left'
  },
  accordionHeaderRow: {
    color: '#000',
    backgroundColor: '#eaeaea !important'
  },
  accordionHeading: {
    flex: '1 0 33%'
  },
  lastSeen: {
    flex: '0 0 125px'
  },
  vulnDescription: {
    flex: '1 1 15%',
    textOverflow: 'hidden',
    textAlign: 'right'
  },
  listRoot: {
    width: '100%',
    backgroundColor: theme.palette.background.paper
  },
  nested: {
    paddingLeft: theme.spacing(2)
  },
  backLink: {
    color: '#A9AEB1',
    textDecoration: 'none',
    fontWeight: 'bold',
    fontSize: '16px',
    marginLeft: '1rem'
  }
}));
